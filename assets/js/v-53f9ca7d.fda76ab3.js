(self.webpackChunkvue_request_doc=self.webpackChunkvue_request_doc||[]).push([[923],{4838:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>h});var e=s(8133);const t=(0,e.uE)('<h1 id="公共-api"><a class="header-anchor" href="#公共-api">#</a> 公共 API</h1><p>VueRequest 通常由 <a href="#return-value">Return Value</a>、<a href="#service">Service</a> 和 <a href="#options">Options</a> 三个部分组成</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token operator">...</span>returnValue <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="return-value"><a class="header-anchor" href="#return-value">#</a> Return Value</h2><h3 id="loading"><a class="header-anchor" href="#loading">#</a> loading</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p><p><strong>Service</strong> 请求的执行状态</p></li></ul><h3 id="data"><a class="header-anchor" href="#data">#</a> data</h3><ul><li><p><strong>类型:</strong> <code>Ref&lt;R | undefined&gt;</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p><p>接口返回的数据，如果有传入 <a href="#formatresult">formatResult</a>，则为格式化后的 <code>data</code></p></li></ul><h3 id="error"><a class="header-anchor" href="#error">#</a> error</h3><ul><li><p><strong>类型:</strong> <code>Ref&lt;Error | undefined&gt;</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p><p>如果在内部抛出了一个错误，则会被 <code>error</code> 接收并返回</p></li></ul><h3 id="params"><a class="header-anchor" href="#params">#</a> params</h3><ul><li><p><strong>类型:</strong> <code>Ref&lt;P[]&gt;</code></p></li><li><p><strong>默认值：</strong> <code>[]</code></p><p><strong>Service</strong> 的请求参数</p></li><li><p><strong>示例</strong></p></li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;api/user?&#39;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> params<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  defaultParams<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 默认请求时，如果存在 defaultParams， 则 params.value 将会等于 defaultParams，否则为空数组</span>\n\n<span class="token comment">// 当 run 传入参数时，此时的参数将会同步到 params 里面</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;Benny&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// params.value 等于 [&#39;Benny&#39;]</span>\n</code></pre></div><h3 id="run"><a class="header-anchor" href="#run">#</a> run</h3><ul><li><p><strong>类型:</strong> <code>(...arg: P[]) =&gt; Promise&lt;R&gt;</code></p><p>手动触发 <strong>Service</strong> 的请求</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>当开启了 <a href="#debounceinterval">debounceInterval</a> 或者 <a href="#throttleinterval">throttleInterval</a> 模式后 <code>run</code> 的返回结果有可能是 <code>Promise&lt;null&gt;</code></p></div></li></ul><h3 id="cancel"><a class="header-anchor" href="#cancel">#</a> cancel</h3><ul><li><p><strong>类型:</strong> <code>() =&gt; void</code></p><ul><li>手动取消本次请求</li><li>停止<a href="#pollinginterval">轮询</a>功能</li></ul><div class="custom-container tip"><p class="custom-container-title">注意</p><p>这里说的取消<strong>并不是真正的停止请求</strong>，只是取消了对 <a href="#data">data</a> 的赋值以及 <a href="#loading">loading</a> 重置为 <code>false</code> 当前的接口请求依旧会继续进行</p></div></li></ul><h3 id="refresh"><a class="header-anchor" href="#refresh">#</a> refresh</h3><ul><li><p><strong>类型:</strong> <code>() =&gt; Promise&lt;R&gt;</code></p><p>使用当前的 <a href="#run">params</a> 重新调用 <a href="#run">run</a></p></li></ul><h3 id="mutate"><a class="header-anchor" href="#mutate">#</a> mutate</h3>',20),o=(0,e.Wm)("li",null,[(0,e.Wm)("p",null,[(0,e.Wm)("strong",null,"类型:"),(0,e.Uk)(),(0,e.Wm)("code",null,"(arg: (oldData: R) => R) => void | (newData: R) => void")]),(0,e.Wm)("p",null,[(0,e.Uk)("直接修改 "),(0,e.Wm)("a",{href:"#data"},"data"),(0,e.Uk)(" 的结果")])],-1),l=(0,e.Wm)("strong",null,"参考",-1),r=(0,e.Uk)("突变"),c=(0,e.Wm)("h3",{id:"queries"},[(0,e.Wm)("a",{class:"header-anchor",href:"#queries"},"#"),(0,e.Uk)(" queries")],-1),p=(0,e.uE)('<li><p><strong>类型:</strong> <code>Queries&lt;R, P&gt;</code></p><p>默认情况下，新请求的数据将会覆盖旧请求的数据。当启用 <a href="#querykey">queryKey</a> 后， <code>queries</code> 能够同时存储多次请求的结果，实现并行的效果</p><p><code>Queries</code> 的类型如下</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Queries<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  loading<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  data<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  error<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Error <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  params<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">mutate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">arg</span><span class="token operator">:</span> <span class="token punctuation">(</span>oldData<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">(</span>newData<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>',1),i=(0,e.Wm)("strong",null,"参考",-1),u=(0,e.Uk)("并行请求"),d=(0,e.uE)('<h2 id="service"><a class="header-anchor" href="#service">#</a> Service</h2><p>TODO</p><h2 id="options"><a class="header-anchor" href="#options">#</a> Options</h2><h3 id="loadingdelay"><a class="header-anchor" href="#loadingdelay">#</a> loadingDelay</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="pollinginterval"><a class="header-anchor" href="#pollinginterval">#</a> pollingInterval</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="pollingwhenhidden"><a class="header-anchor" href="#pollingwhenhidden">#</a> pollingWhenHidden</h3><ul><li><strong>类型</strong>: <code>boolean</code></li></ul><h3 id="pollingwhenoffline"><a class="header-anchor" href="#pollingwhenoffline">#</a> pollingWhenOffline</h3><ul><li><strong>类型</strong>: <code>boolean</code></li></ul><h3 id="debounceinterval"><a class="header-anchor" href="#debounceinterval">#</a> debounceInterval</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="throttleinterval"><a class="header-anchor" href="#throttleinterval">#</a> throttleInterval</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="refreshonwindowfocus"><a class="header-anchor" href="#refreshonwindowfocus">#</a> refreshOnWindowFocus</h3><ul><li><strong>类型</strong>: <code>boolean</code></li></ul><h3 id="refocustimespan"><a class="header-anchor" href="#refocustimespan">#</a> refocusTimespan</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="cachetime"><a class="header-anchor" href="#cachetime">#</a> cacheTime</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="staletime"><a class="header-anchor" href="#staletime">#</a> staleTime</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="errorretrycount"><a class="header-anchor" href="#errorretrycount">#</a> errorRetryCount</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="errorretryinterval"><a class="header-anchor" href="#errorretryinterval">#</a> errorRetryInterval</h3><ul><li><strong>类型</strong>: <code>number</code></li></ul><h3 id="manual"><a class="header-anchor" href="#manual">#</a> manual</h3><ul><li><strong>类型</strong>: <code>boolean</code></li></ul><h3 id="defaultparams"><a class="header-anchor" href="#defaultparams">#</a> defaultParams</h3><ul><li><strong>类型</strong>: <code>P[]</code></li></ul><h3 id="ready"><a class="header-anchor" href="#ready">#</a> ready</h3><ul><li><strong>类型</strong>: <code>Ref&lt;boolean&gt;</code></li></ul><h3 id="initialdata"><a class="header-anchor" href="#initialdata">#</a> initialData</h3><ul><li><strong>类型</strong>: <code>R</code></li></ul><h3 id="refreshdeps"><a class="header-anchor" href="#refreshdeps">#</a> refreshDeps</h3><ul><li><strong>类型</strong>: <code>WatchSource&lt;any&gt;[]</code></li></ul><h3 id="cachekey"><a class="header-anchor" href="#cachekey">#</a> cacheKey</h3><ul><li><strong>类型</strong>: <code>string</code></li></ul><h3 id="querykey"><a class="header-anchor" href="#querykey">#</a> queryKey</h3><ul><li><strong>类型</strong>: <code>(...args: P[]) =&gt; string</code></li></ul><h3 id="formatresult"><a class="header-anchor" href="#formatresult">#</a> formatResult</h3><ul><li><strong>类型</strong>: <code>(data: any) =&gt; R</code></li></ul><h3 id="onsuccess"><a class="header-anchor" href="#onsuccess">#</a> onSuccess</h3><ul><li><strong>类型</strong>: <code>(data: R, params: P[]) =&gt; void</code></li></ul><h3 id="onerror"><a class="header-anchor" href="#onerror">#</a> onError</h3><ul><li><strong>类型</strong>: <code>(error: Error, params: P[]) =&gt; void</code></li></ul>',47),h={render:function(n,a){const s=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("ul",null,[o,(0,e.Wm)("li",null,[(0,e.Wm)("p",null,[l,(0,e.Wm)(s,{to:"/vue-request-docs/zh/guide/documents/mutate.html"},{default:(0,e.w5)((()=>[r])),_:1})])])]),c,(0,e.Wm)("ul",null,[p,(0,e.Wm)("li",null,[(0,e.Wm)("p",null,[i,(0,e.Wm)(s,{to:"/vue-request-docs/zh/guide/documents/queries.html"},{default:(0,e.w5)((()=>[u])),_:1})])])]),d],64)}}},6266:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>e});const e={key:"v-53f9ca7d",path:"/zh/api/",title:"公共 API",frontmatter:{},excerpt:"",headers:[{level:2,title:"Return Value",slug:"return-value",children:[{level:3,title:"loading",slug:"loading",children:[]},{level:3,title:"data",slug:"data",children:[]},{level:3,title:"error",slug:"error",children:[]},{level:3,title:"params",slug:"params",children:[]},{level:3,title:"run",slug:"run",children:[]},{level:3,title:"cancel",slug:"cancel",children:[]},{level:3,title:"refresh",slug:"refresh",children:[]},{level:3,title:"mutate",slug:"mutate",children:[]},{level:3,title:"queries",slug:"queries",children:[]}]},{level:2,title:"Service",slug:"service",children:[]},{level:2,title:"Options",slug:"options",children:[{level:3,title:"loadingDelay",slug:"loadingdelay",children:[]},{level:3,title:"pollingInterval",slug:"pollinginterval",children:[]},{level:3,title:"pollingWhenHidden",slug:"pollingwhenhidden",children:[]},{level:3,title:"pollingWhenOffline",slug:"pollingwhenoffline",children:[]},{level:3,title:"debounceInterval",slug:"debounceinterval",children:[]},{level:3,title:"throttleInterval",slug:"throttleinterval",children:[]},{level:3,title:"refreshOnWindowFocus",slug:"refreshonwindowfocus",children:[]},{level:3,title:"refocusTimespan",slug:"refocustimespan",children:[]},{level:3,title:"cacheTime",slug:"cachetime",children:[]},{level:3,title:"staleTime",slug:"staletime",children:[]},{level:3,title:"errorRetryCount",slug:"errorretrycount",children:[]},{level:3,title:"errorRetryInterval",slug:"errorretryinterval",children:[]},{level:3,title:"manual",slug:"manual",children:[]},{level:3,title:"defaultParams",slug:"defaultparams",children:[]},{level:3,title:"ready",slug:"ready",children:[]},{level:3,title:"initialData",slug:"initialdata",children:[]},{level:3,title:"refreshDeps",slug:"refreshdeps",children:[]},{level:3,title:"cacheKey",slug:"cachekey",children:[]},{level:3,title:"queryKey",slug:"querykey",children:[]},{level:3,title:"formatResult",slug:"formatresult",children:[]},{level:3,title:"onSuccess",slug:"onsuccess",children:[]},{level:3,title:"onError",slug:"onerror",children:[]}]}],filePathRelative:"zh/api/index.md",git:{updatedTime:1613808383e3,contributors:[]}}}}]);