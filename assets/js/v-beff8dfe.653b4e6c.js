(self.webpackChunkvue_request_doc=self.webpackChunkvue_request_doc||[]).push([[319],{3039:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>ce});var l=n(6252);const s=(0,l.uE)('<h1 id="loadmore-扩展-api"><a class="header-anchor" href="#loadmore-扩展-api">#</a> LoadMore 扩展 API</h1><p>加载更多扩展。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token operator">...</span>ReturnValues <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useLoadMore</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">FR</span><span class="token punctuation">,</span> <span class="token constant">LR</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> Options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TS 泛型说明</p><p><code>LR</code> 是 <a href="#datalist"><code>dataList</code></a> 的类型 <em>（注：该泛型受到 <code>unknown[]</code> 的约束）</em></p></div>',4),t=(0,l.Wm)("strong",null,"用法参考:",-1),o=(0,l.Uk)(),r=(0,l.Uk)("LoadMore 扩展"),i={class:"custom-container warning"},c=(0,l.Wm)("p",{class:"custom-container-title"},"注意",-1),d=(0,l.Uk)("以下API，是 "),p=(0,l.Uk)("公共API"),u=(0,l.Uk)(" 的"),h=(0,l.Wm)("strong",null,"超集",-1),m=(0,l.Uk)("。如果没有特别说明的，则和 "),g=(0,l.Uk)("公共API"),k=(0,l.Uk)(" 保持一致。"),W=(0,l.uE)('<h2 id="return-values"><a class="header-anchor" href="#return-values">#</a> Return Values</h2><h3 id="datalist"><a class="header-anchor" href="#datalist">#</a> dataList</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;LR&gt;</code></p></li><li><p><strong>默认值：</strong> <code>[]</code></p><p>所有请求数据（数据取自 <strong>data[<a href="#listkey">listkey</a>]</strong>）的合并数组</p></li></ul><h3 id="loadingmore"><a class="header-anchor" href="#loadingmore">#</a> loadingMore</h3>',4),f=(0,l.Wm)("li",null,[(0,l.Wm)("p",null,[(0,l.Wm)("strong",null,"类型："),(0,l.Uk)(),(0,l.Wm)("code",null,"Ref<boolean>")])],-1),v=(0,l.Wm)("p",null,[(0,l.Wm)("strong",null,"默认值："),(0,l.Uk)(),(0,l.Wm)("code",null,"false")],-1),y=(0,l.Uk)("是否正在加载更多，用于记录 "),U=(0,l.Wm)("a",{href:"#loadmore"},[(0,l.Wm)("code",null,"loadMore")],-1),R=(0,l.Uk)(" 是否正在触发。如果想要判断 "),M=(0,l.Wm)("code",null,"Service",-1),L=(0,l.Uk)(" 是否正在请求，请使用 "),w=(0,l.Wm)("code",null,"loading",-1),q=(0,l.uE)('<h3 id="nomore"><a class="header-anchor" href="#nomore">#</a> noMore</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p><p>是否有更多数据，需要配合 <a href="#isnomore"><code>isNoMore</code></a> 使用</p></li></ul><h3 id="loadmore"><a class="header-anchor" href="#loadmore">#</a> loadMore</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; void</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p><p>触发加载更多</p></li></ul><h3 id="reload"><a class="header-anchor" href="#reload">#</a> reload</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; void</code></p><p>清空所有请求状态，以及请求结果（包括<a href="#datalist"><code>dataList</code></a>），并重新触发请求</p></li></ul>',6),_={id:"queries"},z=(0,l.Wm)("a",{class:"header-anchor",href:"#queries"},"#",-1),P=(0,l.Uk)(" queries "),b=(0,l.Uk)("LoadMore 模式下，不支持 "),x=(0,l.Uk)("并发请求"),D=(0,l.uE)('<h2 id="service"><a class="header-anchor" href="#service">#</a> Service</h2><h3 id="请求函数"><a class="header-anchor" href="#请求函数">#</a> 请求函数</h3><ul><li><p><strong>类型：</strong></p><ul><li><code>(returnData: ReturnDataType | undefined, ...params: P) =&gt; Promise&lt;R&gt;</code></li><li><code>| (returnData: ReturnDataType | undefined, ...params: P) =&gt; string</code></li><li><code>| (returnData: ReturnDataType | undefined, ...params: P) =&gt; ({ url: string; [key: string]: any; })</code></li></ul></li><li><p><strong>详情：</strong></p><p>第一个参数的类型解释如下（首次请求时，第一个参数是<code>undefined</code>）</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnDataType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">;</span> <span class="token comment">// 上一次请求的结果</span>\n  dataList<span class="token operator">:</span> <span class="token constant">LR</span><span class="token punctuation">;</span> <span class="token comment">// 当前存储的结果合并数组</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul>',3),T={id:"字符串"},A=(0,l.Wm)("a",{class:"header-anchor",href:"#字符串"},"#",-1),E=(0,l.Uk)(" 字符串 "),I=(0,l.Wm)("p",null,"loadMore 模式下，不支持。",-1),K={id:"对象"},S=(0,l.Wm)("a",{class:"header-anchor",href:"#对象"},"#",-1),N=(0,l.Uk)(" 对象 "),O=(0,l.Wm)("p",null,"loadMore 模式下，不支持。",-1),C=(0,l.Wm)("h2",{id:"options"},[(0,l.Wm)("a",{class:"header-anchor",href:"#options"},"#"),(0,l.Uk)(" Options")],-1),V=(0,l.Wm)("h3",{id:"listkey"},[(0,l.Wm)("a",{class:"header-anchor",href:"#listkey"},"#"),(0,l.Uk)(" listKey")],-1),j=(0,l.Wm)("li",null,[(0,l.Wm)("p",null,[(0,l.Wm)("strong",null,"类型："),(0,l.Uk)(),(0,l.Wm)("code",null,"string")])],-1),B=(0,l.Wm)("li",null,[(0,l.Wm)("p",null,[(0,l.Wm)("strong",null,"默认值："),(0,l.Uk)(),(0,l.Wm)("code",null,"list")])],-1),F=(0,l.Wm)("p",null,[(0,l.Wm)("strong",null,"详情：")],-1),H={class:"custom-container tip"},Y=(0,l.Wm)("p",{class:"custom-container-title"},"提示",-1),G=(0,l.Wm)("code",null,"listKey",-1),J=(0,l.Uk)(" 使用 "),Q=(0,l.Wm)("code",null,"lodash.get",-1),X=(0,l.Uk)(" 来实现的，因此支持传入对象属性的路径来获取值，详情可以参考 "),Z={href:"https://lodash.com/docs/4.17.15#get",target:"_blank",rel:"noopener noreferrer"},$=(0,l.Uk)("lodash文档"),ee=(0,l.Uk)("指定 "),ae=(0,l.Wm)("code",null,"data",-1),ne=(0,l.Uk)(" 中数据数组的路径"),le=(0,l.uE)('<h3 id="isnomore"><a class="header-anchor" href="#isnomore">#</a> isNoMore</h3><ul><li><p><strong>类型：</strong> <code>(data: R) =&gt; boolean</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p></li><li><p><strong>详情：</strong></p><p>判断是否还有更多数据</p></li></ul>',2),se={id:"querykey"},te=(0,l.Wm)("a",{class:"header-anchor",href:"#querykey"},"#",-1),oe=(0,l.Uk)(" queryKey "),re=(0,l.Uk)("LoadMore 模式下，不支持 "),ie=(0,l.Uk)("并发请求"),ce={render:function(e,a){const n=(0,l.up)("RouterLink"),ce=(0,l.up)("Badge"),de=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[s,(0,l.Wm)("p",null,[t,o,(0,l.Wm)(n,{to:"/zh/guide/documentation/advancedUsage.html#loadmore"},{default:(0,l.w5)((()=>[r])),_:1})]),(0,l.Wm)("div",i,[c,(0,l.Wm)("p",null,[d,(0,l.Wm)(n,{to:"/zh/api/"},{default:(0,l.w5)((()=>[p])),_:1}),u,h,m,(0,l.Wm)(n,{to:"/zh/api/"},{default:(0,l.w5)((()=>[g])),_:1}),k])]),W,(0,l.Wm)("ul",null,[f,(0,l.Wm)("li",null,[v,(0,l.Wm)("p",null,[y,U,R,(0,l.Wm)(n,{to:"/zh/api/index.html#service"},{default:(0,l.w5)((()=>[M])),_:1}),L,(0,l.Wm)(n,{to:"/zh/api/index.html#loading"},{default:(0,l.w5)((()=>[w])),_:1})])])]),q,(0,l.Wm)("h3",_,[z,P,(0,l.Wm)(ce,{text:"不支持",type:"danger"})]),(0,l.Wm)("p",null,[b,(0,l.Wm)(n,{to:"/zh/guide/documentation/queries.html"},{default:(0,l.w5)((()=>[x])),_:1})]),D,(0,l.Wm)("h3",T,[A,E,(0,l.Wm)(ce,{text:"不支持",type:"danger"})]),I,(0,l.Wm)("h3",K,[S,N,(0,l.Wm)(ce,{text:"不支持",type:"danger"})]),O,C,V,(0,l.Wm)("ul",null,[j,B,(0,l.Wm)("li",null,[F,(0,l.Wm)("div",H,[Y,(0,l.Wm)("p",null,[G,J,Q,X,(0,l.Wm)("a",Z,[$,(0,l.Wm)(de)])])])])]),(0,l.Wm)("p",null,[ee,(0,l.Wm)(n,{to:"/zh/api/#data"},{default:(0,l.w5)((()=>[ae])),_:1}),ne]),le,(0,l.Wm)("h3",se,[te,oe,(0,l.Wm)(ce,{text:"不支持",type:"danger"})]),(0,l.Wm)("p",null,[re,(0,l.Wm)(n,{to:"/zh/guide/documentation/queries.html"},{default:(0,l.w5)((()=>[ie])),_:1})])],64)}}},1475:(e,a,n)=>{"use strict";n.r(a),n.d(a,{data:()=>l});const l={key:"v-beff8dfe",path:"/zh/api/loadMore.html",title:"LoadMore 扩展 API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Return Values",slug:"return-values",children:[{level:3,title:"dataList",slug:"datalist",children:[]},{level:3,title:"loadingMore",slug:"loadingmore",children:[]},{level:3,title:"noMore",slug:"nomore",children:[]},{level:3,title:"loadMore",slug:"loadmore",children:[]},{level:3,title:"reload",slug:"reload",children:[]},{level:3,title:"queries",slug:"queries",children:[]}]},{level:2,title:"Service",slug:"service",children:[{level:3,title:"请求函数",slug:"请求函数",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]},{level:3,title:"对象",slug:"对象",children:[]}]},{level:2,title:"Options",slug:"options",children:[{level:3,title:"listKey",slug:"listkey",children:[]},{level:3,title:"isNoMore",slug:"isnomore",children:[]},{level:3,title:"queryKey",slug:"querykey",children:[]}]}],filePathRelative:"zh/api/loadMore.md",git:{updatedTime:1617013663e3,contributors:[]}}}}]);